<?php

namespace Librinfo\CRMBundle\Entity\Test\Unit;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-30 at 11:08:42.
 */

use PHPUnit\Framework\TestCase;
use Librinfo\CRMBundle\Entity\Country;


class CountryTest extends TestCase
{
    /**
     * @var Country
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
      $this->object = new Country;
    /*
    * @todo: uncomment this line
    * $this->object = new Country;
    */
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::setCode
     * @todo   Implement testSetCode().
     */
    public function testSetCode()
    {
      $this->assertNotEquals($this->object->setCode(12),12);
      $this->assertNotEquals($this->object->setCode(' '),' ');
      $this->assertTrue($this->object->setCode(' ')!==' ');
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::getCode
     * @todo   Implement testGetCode().
     */
    public function testGetCode()
    {
      $test=$this->object->getCode();
      $this->assertEquals($test,'');
      $this->object->setCode("45");
      $this->assertEquals($this->object->getCode(),"45");
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::setEnabled
     * @todo   Implement testSetEnabled().
     */
    public function testSetEnabled()
    {
      $this->assertTrue($this->object->setEnabled(true)!==true);
      $this->assertFalse($this->object->setEnabled('1')==='');
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::getEnabled
     * @todo   Implement testGetEnabled().
     */
    public function testGetEnabled()
    {
      $this->object->setEnabled('4');
      $test=$this->object->getEnabled();
      $this->assertEquals($test,'4');

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::enable
     * @todo   Implement testEnable().
     */
    public function testEnable()
    {
      $this->assertNotEquals($this->object->enable(),false);
      $this->assertFalse($this->object->enable()===false);
      $test=$this->object->enable();
      $this->assertFalse($test===true);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::disable
     * @todo   Implement testDisable().
     */
    public function testDisable()
    {
      $this->assertNotEquals($this->object->disable(),false);
      $this->assertFalse($this->object->disable()===false);
      $test=$this->object->disable();
      $this->assertFalse($test===true);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::addProvince
     * @todo   Implement testAddProvince().
     */
    public function testAddProvince()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::removeProvince
     * @todo   Implement testRemoveProvince().
     */
    public function testRemoveProvince()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::getProvinces
     * @todo   Implement testGetProvinces().
     */
    public function testGetProvinces()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::hasProvinces
     * @todo   Implement testHasProvinces().
     */
    public function testHasProvinces()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::hasProvince
     * @todo   Implement testHasProvince().
     */
    public function testHasProvince()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::getId
     * @todo   Implement testGetId().
     */
    public function testGetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::setId
     * @todo   Implement testSetId().
     */
    public function testSetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::isNew
     * @todo   Implement testIsNew().
     */
    public function testIsNew()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Country::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
