<?php

namespace Librinfo\CRMBundle\Entity\Test\Unit;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-06-29 at 10:30:10.
 */

use PHPUnit\Framework\TestCase;
use Librinfo\CRMBundle\Entity\Contact;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Librinfo\CRMBundle\Entity\OuterExtension\HasAddresses;

class ContactTest extends TestCase
{
    /**
     * @var Contact
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
      $this->object = new Contact;
    /*
    * @todo: uncomment this line
    * $this->object = new Contact;
    */
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setFirstname
     * @todo   Implement testSetFirstname().
     */
    public function testSetFirstname()
    {
      $firstname = 'ali';
      $this->object->setFirstname($firstname);
      $this->assertEquals($this->object->getFirstname(),$firstname);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getFirstname
     * @todo   Implement testGetFirstname().
     */
    public function testGetFirstname()
    {
      $firstname='ali';
      $this->object->setFirstname($firstname);
      $test=$this->object->getFirstname();
      $this->assertEquals($firstname,$test);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setShortname
     * @todo   Implement testSetShortname().
     */
    public function testSetShortname()
    {
      $shortname = 'pirlos';
      $this->object->setShortname($shortname);
      $this->assertEquals($this->object->getShortname(),$shortname);

/* @todo : find a good way to check result */
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getShortname
     * @covers Librinfo\CRMBundle\Entity\Contact::setShortname
     * @todo   Implement testGetShortname().
     */
    public function testGetShortname()
    {
      $shortname='ali';
      $this->object->setShortname($shortname);
      $test=$this->object->getShortname();
      $this->assertEquals($shortname,$test);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setTitle
     * @todo   Implement testSetTitle().
     */
    public function testSetTitle()
    {
      $title = 'Ambassadeurs';
      $this->object->setTitle($title);
      $this->assertTrue($this->object->getTitle()===$title);

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getTitle
     * @todo   Implement testGetTitle().
     */
    public function testGetTitle()
    {
      $title='Ambassadeurs';
      $this->object->setTitle($title);
      $test=$this->object->getTitle();
      $this->assertEquals($title,$test);

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setFlashOnControl
     * @todo   Implement testSetFlashOnControl().
     */
    public function testSetFlashOnControl()
    {
      $flashOnControl = 'AAFF12Q';
      $this->object->setFlashOnControl($flashOnControl);
      $this->assertEquals($this->object->getFlashOnControl(),$flashOnControl);

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getFlashOnControl
     * @todo   Implement testGetFlashOnControl().
     */
    public function testGetFlashOnControl()
    {
      $flashOnControl='Ambassadeurs';
      $this->object->setFlashOnControl($flashOnControl);
      $test=$this->object->getFlashOnControl();
      $this->assertEquals($flashOnControl,$test);

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setPassword
     * @todo   Implement testSetPassword().
     */
    public function testSetPassword()
    {
      $password = 'secret';
      $this->object->setPassword($password);
      $this->assertTrue($this->object->getPassword()===$password);

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getPassword
     * @todo   Implement testGetPassword().
     */
    public function testGetPassword()
    {
      $password='secret';
      $this->object->setPassword($password);
      $test=$this->object->getPassword();
      $this->assertEquals($password,$test);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setFamilyContact
     * @todo   Implement testSetFamilyContact().
     */
    public function testSetFamilyContact()
    {
      $familyContact = 'familly';
      $this->object->setFamilyContact($familyContact);
      $this->assertEquals($this->object->getFamilyContact(),$familyContact);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getFamilyContact
     * @todo   Implement testGetFamilyContact().
     */
    public function testGetFamilyContact()
    {
      $familyContact = 'familly';
      $this->object->setFamilyContact($familyContact);
      $test=$this->object->getFamilyContact();
      $this->assertEquals($familyContact,$test);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setCulture
     * @todo   Implement testSetCulture().
     */
    public function testSetCulture()
    {
      $culture = 'culture';
      $this->object->setCulture($culture);
      $this->assertEquals($this->object->getCulture(),$culture);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getCulture
     * @todo   Implement testGetCulture().
     */
    public function testGetCulture()
    {
      $culture = 'culture';
      $this->object->setCulture($culture);
      $test=$this->object->getCulture();
      $this->assertTrue($culture===$test);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::initCollections
     * @todo   Implement testInitCollections().
     */
    public function testInitCollections()
    {
      $this->object->InitCollections();
      $this->assertInstanceOf(ArrayCollection::class, $this->object->getPhones());
      $this->assertInstanceOf(ArrayCollection::class, $this->object->getCircles());
      $this->assertInstanceOf(ArrayCollection::class, $this->object->getPositions());
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::__clone
     * @todo   Implement test__clone().
     */
    public function test__clone()
    {
      // init
      $id = 'id';
      $this->object->setId($id);
      // test methods
      $clone = clone $this->object;
      $this->assertNull($clone->getId());
      $this->assertInstanceOf(ArrayCollection::class,$clone->getPositions());
      $this->assertInstanceOf(ArrayCollection::class,$clone->getCircles());
      // test object
      $this->assertEquals($id,$this->object->getId());

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::addPhone
     * @todo   Implement testAddPhone().
     */
    public function testAddPhone()
    {
      // Remove the following lines when you implement this test.
      $this->markTestIncomplete(
          'This test has not been implemented yet.'
      );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::removePhone
     * @todo   Implement testRemovePhone().
     */
    public function testRemovePhone()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getPhones
     * @todo   Implement testGetPhones().
     */
    public function testGetPhones()
    {

        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
      $firstname='firstname';
      $name='name';
      $this->object->setFirstname($firstname);
      $this->object->setName($name);
      $this->object->getFirstname();
      $this->object->getName();
      $test=$this->object->__toString();
      $this->assertEquals($test,'firstname name');

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::isPersonal
     * @todo   Implement testIsPersonal().
     */
    public function testIsPersonal()
    {
      $this->assertTrue($this->object->isPersonal()===true);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getFulltextName
     * @todo   Implement testGetFulltextName().
     */
    public function testGetFulltextName()
    {
      $title = 'ambassadeurs';
      $this->object->setTitle($title);
      $this->object->getTitle();

      $firstname='firstname';
      $this->object->setFirstname($firstname);
      $this->object->getFirstname();

      $name='name';
      $this->object->setName($name);
      $this->object->getName();


      $test=$this->object->getFulltextName();
      $this->assertEquals($test,'ambassadeurs Firstname NAME');

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::validateName
     * @todo   Implement testValidateName().
     */
    public function testValidateName()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getId
     * @todo   Implement testGetId().
     */
    public function testGetId()
    {
      $id = 12 ;
      $this->object->setId($id);
      $test=$this->object->getId();
      $this->assertTrue($id===$test);

      //$this->assertTrue($this->object->getId()===null);

    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setId
     * @todo   Implement testSetId().
     */
    public function testSetId()
    {
      $id = 120 ;
      $this->object->setId($id);
      $this->assertEquals(120 , $this->object->getId());
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::isNew
     * @todo   Implement testIsNew().
     */
    public function testIsNew()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setName
     * @todo   Implement testSetName().
     */
    public function testSetName()
    {
      $name = 'name';
      $this->object->setName($name);
      $this->assertEquals($name,$this->object->getName());
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getName
     * @todo   Implement testGetName().
     */
    public function testGetName()
    {
      $name='ahamada';
      $this->object->setName($name);
      $test=$this->object->getName();
      $this->assertEquals("ahamada",$test);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getCreatedAt
     * @todo   Implement testGetCreatedAt().
     */
    public function testGetCreatedAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setCreatedAt
     * @todo   Implement testSetCreatedAt().
     */
    public function testSetCreatedAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getUpdatedAt
     * @todo   Implement testGetUpdatedAt().
     */
    public function testGetUpdatedAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setUpdatedAt
     * @todo   Implement testSetUpdatedAt().
     */
    public function testSetUpdatedAt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getEmail
     * @todo   Implement testGetEmail().
     */
    public function testGetEmail()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setEmail
     * @todo   Implement testSetEmail().
     */
    public function testSetEmail()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::isEmailNpai
     * @todo   Implement testIsEmailNpai().
     */
    public function testIsEmailNpai()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setEmailNpai
     * @todo   Implement testSetEmailNpai().
     */
    public function testSetEmailNpai()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::isEmailNoNewsletter
     * @todo   Implement testIsEmailNoNewsletter().
     */
    public function testIsEmailNoNewsletter()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setEmailNoNewsletter
     * @todo   Implement testSetEmailNoNewsletter().
     */
    public function testSetEmailNoNewsletter()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::addPosition
     * @todo   Implement testAddPosition().
     */
    public function testAddPosition()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::removePosition
     * @todo   Implement testRemovePosition().
     */
    public function testRemovePosition()
    {
      // Remove the following lines when you implement this test.
      $this->markTestIncomplete(
          'This test has not been implemented yet.'
      );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getPositions
     * @todo   Implement testGetPositions().
     */
    public function testGetPositions()
    {
      $this->assertTrue($this->object->getPositions()!==ArrayCollection::class);
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::addCircle
     * @todo   Implement testAddCircle().
     */
    public function testAddCircle()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::removeCircle
     * @todo   Implement testRemoveCircle().
     */
    public function testRemoveCircle()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getCircles
     * @todo   Implement testGetCircles().
     */
    public function testGetCircles()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setDescription
     * @todo   Implement testSetDescription().
     */
    public function testSetDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getDescription
     * @todo   Implement testGetDescription().
     */
    public function testGetDescription()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::addSearchIndex
     * @todo   Implement testAddSearchIndex().
     */
    public function testAddSearchIndex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::removeSearchIndex
     * @todo   Implement testRemoveSearchIndex().
     */
    public function testRemoveSearchIndex()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getSearchIndexes
     * @todo   Implement testGetSearchIndexes().
     */
    public function testGetSearchIndexes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::setSearchIndexes
     * @todo   Implement testSetSearchIndexes().
     */
    public function testSetSearchIndexes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::analyseField
     * @todo   Implement testAnalyseField().
     */
    public function testAnalyseField()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::initAddresses
     * @todo   Implement testInitAddresses().
     */
    public function testInitAddresses()
    {
      $this->object->InitAddresses();
      $this->assertInstanceOf(ArrayCollection::class, $this->object->getAddresses());
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::addAddress
     * @todo   Implement testAddAddress().
     */
    public function testAddAddress()
    {
      // Remove the following lines when you implement this test.
      $this->markTestIncomplete(
          'This test has not been implemented yet.'
      );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::removeAddress
     * @todo   Implement testRemoveAddress().
     */
    public function testRemoveAddress()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\CRMBundle\Entity\Contact::getAddresses
     * @todo   Implement testGetAddresses().
     */
    public function testGetAddresses()
    {

    }
}
